#!/usr/bin/env python3

import docker
import os
import sys
import argparse

client = docker.from_env()


if len(sys.argv) < 2:
    print("Usage: feature_extractor [extractor]")
    exit()


extractor = sys.argv[1]

gpu_options = {}
cpu_options = {}
del_argvs = []
verbose = False
for i, args in enumerate(sys.argv):
    if args.startswith("--docker_gpu="):
        gpus = args.split("=")[1]
        gpu_options = {
            "runtime": "nvidia",
            "environment": {"CUDA_VISIBLE_DEVICES": gpus},
        }
        del_argvs.append(i)
    elif args.startswith("--docker_cpu="):
        cpus = args.split("=")[1]
        cpu_options = {"cpuset_cpus": cpus}
        del_argvs.append(i)
    elif args.startswith("--docker_verbose"):
        verbose = True
        del_argvs.append(i)

for idx in sorted(del_argvs, reverse=True):
    del sys.argv[idx]

if len(sys.argv) < 5:
    sys.argv += [""] * (5 - len(sys.argv))

fn = sys.argv[2]
input_ = sys.argv[3]
output = sys.argv[4]
rest_args = " ".join(sys.argv[5:])

tag = f"feature_extractors_{extractor}"

try:
    client.images.get(tag)
except docker.errors.ImageNotFound:
    print("building image..")
    if verbose:
        print(os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir, "extractors", extractor)))
    client.images.build(path=os.path.join(os.path.dirname(__file__), os.pardir, "extractors", extractor), tag=tag)
    print("done building image")

volumes = {}
input_arg = ""
output_arg = ""

if output:
    volumes[os.path.dirname(os.path.abspath(output))] = {"bind": "/output", "mode": "rw"}
    output_arg = os.path.join('/output', os.path.basename(output))

if input_:
    if os.path.exists(input_):
        volumes[os.path.dirname(os.path.abspath(input_))] = {"bind": "/input", "mode": "ro"}
        input_arg = os.path.join('/input', os.path.basename(input_))
    else:
        input_arg = input_

command = f"python extract.py {fn} {input_arg} {output_arg} {rest_args}"

try:
    out = client.containers.run(
        tag,
        command=command,
        # auto_remove=True,
        **gpu_options,
        **cpu_options,
        volumes=volumes
    )
    print(out.decode('utf-8'))
except docker.errors.ContainerError as e:
    if verbose:
        print('image used:', e.image)
        print('command used:', e.command)
    print(e.container.logs().decode('utf-8'))